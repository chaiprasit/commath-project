{"version":3,"sources":["logo.svg","views/home.js","views/BasicComputing.js","views/LinearEquations.js","views/Interpolation.js","views/Differentiation.js","views/Integration.js","views/Rootfinding.js","rounting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","navigate","useNavigate","nextPage","page","Button","onClick","color","BasicComputing","LinearEquations","Interpolation","Differentiation","Integration","Rootfinding","rounting","path","element","App","routing","useRoutes","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6GCuC5BC,MAhCf,WACE,IAAMC,EAAWC,cAEXC,EAAW,SAACC,GAChBH,EAAS,IAAIG,IAGf,OACE,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,mBAAoBI,MAAM,UACrD,kDACK,6BACT,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,oBAAqBI,MAAM,UACtD,mDACK,6BACT,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,kBAAmBI,MAAM,UACpD,iDACK,6BACT,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,oBAAqBI,MAAM,UACtD,kDACK,6BACT,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,gBAAiBI,MAAM,UAClD,+CACK,6BACT,kBAACF,EAAA,EAAD,CAAQC,QAAS,WAAKH,EAAS,gBAAiBI,MAAM,UAClD,+CACK,+BCvBFC,MARf,WACI,OACI,mDCMOC,MARf,WACI,OACI,oDCMOC,MARf,WACI,OACI,iDCMOC,MARf,WACI,OACI,mDCMOC,MARf,WACI,OACI,+CCMOC,MARf,WACI,OACI,gDCwCSC,EAnCA,CACb,CACEC,KAAM,IACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,iBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,gBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,kBACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,cACNC,QAAS,kBAAC,EAAD,OAEX,CACED,KAAM,cACNC,QAAS,kBAAC,EAAD,QC7BAC,EALH,WACV,IAAMC,EAAUC,YAAUC,GAC1B,OAAO,6BAAMF,I,OCIKG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b1017c74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { CardTitle, CardText, Row, Col, Button, Card } from \"reactstrap\";\nimport \"../App.css\";\n// import { Link } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction Home() {\n  const navigate = useNavigate();\n\n  const nextPage = (page) => {\n    navigate(\"/\"+page);\n  }\n\n  return (\n    <div>\n        <Button onClick={()=>{nextPage(\"BasicComputing\")}} color=\"danger\">\n            <h5>1.Basic Computing</h5>\n        </Button><br/>\n        <Button onClick={()=>{nextPage(\"LinearEquations\")}} color=\"danger\">\n            <h5>2.Linear Equations</h5>\n        </Button><br/>\n        <Button onClick={()=>{nextPage(\"Interpolation\")}} color=\"danger\">\n            <h5>3.Interpolation\t</h5>\n        </Button><br/>\n        <Button onClick={()=>{nextPage(\"Differentiation\")}} color=\"danger\">\n            <h5>4.Differentiation</h5>\n        </Button><br/>\n        <Button onClick={()=>{nextPage(\"Integration\")}} color=\"danger\">\n            <h5>5.Integration\t</h5>\n        </Button><br/>\n        <Button onClick={()=>{nextPage(\"Rootfinding\")}} color=\"danger\">\n            <h5>6.Root-finding</h5>\n        </Button><br/>\n        \n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react'\n\nfunction BasicComputing() {\n    return (\n        <div>\n            1.Basic Computing\n        </div>\n    )\n}\n\nexport default BasicComputing;","import React from 'react'\n\nfunction LinearEquations() {\n    return (\n        <div>\n            2.Linear Equations\n        </div>\n    )\n}\n\nexport default LinearEquations;","import React from 'react'\n\nfunction Interpolation() {\n    return (\n        <div>\n            3.Interpolation\t\n        </div>\n    )\n}\n\nexport default Interpolation;","import React from 'react'\n\nfunction Differentiation() {\n    return (\n        <div>\n            4.Differentiation\n        </div>\n    )\n}\n\nexport default Differentiation;","import React from 'react'\n\nfunction Integration() {\n    return (\n        <div>\n            5.Integration\n        </div>\n    )\n}\n\nexport default Integration;","import React from 'react'\n\nfunction Rootfinding() {\n    return (\n        <div>\n            6.Root-finding\n        </div>\n    )\n}\n\nexport default Rootfinding;","import React from 'react'\r\nimport Home from './views/home'\r\nimport BasicComputing from './views/BasicComputing'\r\nimport LinearEquations from './views/LinearEquations'\r\nimport Interpolation from './views/Interpolation'\r\nimport Differentiation from './views/Differentiation'\r\nimport Integration from './views/Integration'\r\nimport Rootfinding from './views/Rootfinding'\r\n\r\nconst rounting = [\r\n    {\r\n      path: \"/\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"commath-project\",\r\n      element: <Home />,\r\n    },\r\n    {\r\n      path: \"BasicComputing\",\r\n      element: <BasicComputing />,\r\n    },\r\n    {\r\n      path: \"LinearEquations\",\r\n      element: <LinearEquations />,\r\n    },\r\n    {\r\n      path: \"Interpolation\",\r\n      element: <Interpolation />,\r\n    },\r\n    {\r\n      path: \"Differentiation\",\r\n      element: <Differentiation />,\r\n    },\r\n    {\r\n      path: \"Integration\",\r\n      element: <Integration />,\r\n    },\r\n    {\r\n      path: \"Rootfinding\",\r\n      element: <Rootfinding />,\r\n    },\r\n  ];\r\n  \r\n  export default rounting;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport routes from \"./rounting\";\nimport { useRoutes } from \"react-router-dom\";\n\nconst App = () => {\n  const routing = useRoutes(routes);\n  return <div>{routing}</div>;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}